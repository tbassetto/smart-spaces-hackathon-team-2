{"version":3,"sources":["uuid-utils.js"],"names":["constructHydraId","deconstructHydraId","type","id","toUpperCase","payload","split","pop"],"mappings":";;;;;QAUgBA,gB,GAAAA,gB;QAWAC,kB,GAAAA,kB;;AArBhB;;AAEA;;;;;;;;AAQO,SAASD,gBAAT,CAA0BE,IAA1B,EAAgCC,EAAhC,EAAoC;AACzC,SAAO,uCAA0BD,KAAKE,WAAL,EAA1B,SAAgDD,EAAhD,CAAP;AACD;;AAED;;;;;;;AAOO,SAASF,kBAAT,CAA4BE,EAA5B,EAAgC;AACrC,MAAME,UAAU,kBAAOF,EAAP,EAAWG,KAAX,CAAiB,GAAjB,CAAhB;;AAEA,SAAO;AACLH,QAAIE,QAAQE,GAAR,EADC;AAELL,UAAMG,QAAQE,GAAR;AAFD,GAAP;AAID","file":"uuid-utils.js","sourcesContent":["import {encode, decode} from './base64';\n\n/**\n * Constructs a Hydra ID for a given UUID and type.\n *\n * @export\n * @param {string} type one of PEOPLE, TEAM, ROOM\n * @param {any} id\n * @returns {string}\n */\nexport function constructHydraId(type, id) {\n  return encode(`ciscospark://us/${type.toUpperCase()}/${id}`);\n}\n\n/**\n * Deconstructs a Hydra ID and provides the UUID.\n *\n * @export\n * @param {String} id\n * @returns {String}\n */\nexport function deconstructHydraId(id) {\n  const payload = decode(id).split('/');\n\n  return {\n    id: payload.pop(),\n    type: payload.pop()\n  };\n}\n"]}