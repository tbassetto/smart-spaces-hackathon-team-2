{"version":3,"sources":["process-image.js"],"names":["processImage","file","type","thumbnailMaxWidth","thumbnailMaxHeight","enableThumbnails","logger","fileType","startsWith","resolve","fileDimensions","reject","size","err","thumbnail","thumbnailDimensions","resize","autoOrient","toBuffer","buffer","then","all","catch","errorString","toString","includes","warn","debug"],"mappings":";;;;;;;;;;;;;;kBAiBwBA,Y;;AAbxB;;;;;;AAGA;;;;;;;;;;AAUe,SAASA,YAAT,OAEZ;AAAA,MADDC,IACC,QADDA,IACC;AAAA,MADKC,IACL,QADKA,IACL;AAAA,MADWC,iBACX,QADWA,iBACX;AAAA,MAD8BC,kBAC9B,QAD8BA,kBAC9B;AAAA,MADkDC,gBAClD,QADkDA,gBAClD;AAAA,MADoEC,MACpE,QADoEA,MACpE;;AACD,MAAMC,WAAWL,QAAQD,KAAKC,IAA9B;AACA,MAAI,CAACK,QAAD,IAAa,CAACA,SAASC,UAAT,CAAoB,OAApB,CAAlB,EAAgD;AAC9C,WAAO,kBAAQC,OAAR,EAAP;AACD;;AAED,MAAMC,iBAAiB,sBAAY,UAACD,OAAD,EAAUE,MAAV,EAAqB;AACtD,sBAAGV,IAAH,EAASW,IAAT,CAAc,UAACC,GAAD,EAAMD,IAAN,EAAe;AAC3B,UAAIC,GAAJ,EAAS;AACPF,eAAOE,GAAP;AACA;AACD;;AAEDJ,cAAQ,oBAAKG,IAAL,EAAW,OAAX,EAAoB,QAApB,CAAR;AACD,KAPD;AAQD,GATsB,CAAvB;;AAWA,MAAIE,kBAAJ;AAAA,MAAeC,4BAAf;AACA,MAAIV,gBAAJ,EAAsB;AACpBS,gBAAY,sBAAY,UAACL,OAAD,EAAUE,MAAV,EAAqB;AAC3C,wBAAGV,IAAH,EAASe,MAAT,CAAgBb,iBAAhB,EAAmCC,kBAAnC,EACGa,UADH,GAEGC,QAFH,CAEY,KAFZ,EAEmB,UAACL,GAAD,EAAMM,MAAN,EAAiB;AAChC,YAAIN,GAAJ,EAAS;AACPF,iBAAOE,GAAP;AACA;AACD;;AAEDJ,gBAAQU,MAAR;AACD,OATH;AAUD,KAXW,CAAZ;;AAaAJ,0BAAsBD,UAAUM,IAAV,CAAe,UAACD,MAAD;AAAA,aAAY,sBAAY,UAACV,OAAD,EAAUE,MAAV,EAAqB;AAChF,0BAAGQ,MAAH,EACGP,IADH,CACQ,UAACC,GAAD,EAAMD,IAAN,EAAe;AACnB,cAAIC,GAAJ,EAAS;AACPF,mBAAOE,GAAP;AACA;AACD;;AAEDJ,kBAAQ,oBAAKG,IAAL,EAAW,OAAX,EAAoB,QAApB,CAAR;AACD,SARH;AASD,OAVgD,CAAZ;AAAA,KAAf,CAAtB;AAWD;;AAGD,SAAO,kBAAQS,GAAR,CAAY,CAACP,SAAD,EAAYJ,cAAZ,EAA4BK,mBAA5B,CAAZ,EACJO,KADI,CACE,UAACT,GAAD,EAAS;AACd,QAAMU,cAAcV,IAAIW,QAAJ,EAApB;AACA,QAAID,YAAYE,QAAZ,CAAqB,OAArB,CAAJ,EAAmC;AACjCnB,aAAOoB,IAAP,CAAYb,GAAZ,EAAiB,8BAAjB;AACA,aAAO,kBAAQJ,OAAR,EAAP;AACD;;AAED,QAAIc,YAAYE,QAAZ,CAAqB,0CAArB,CAAJ,EAAsE;AACpEnB,aAAOqB,KAAP,CAAad,GAAb,EAAkB,qCAAlB;AACA,aAAO,kBAAQJ,OAAR,EAAP;AACD;;AAED,QAAIc,YAAYE,QAAZ,CAAqB,4BAArB,CAAJ,EAAwD;AACtDnB,aAAOqB,KAAP,CAAad,GAAb,EAAkB,qCAAlB;AACA,aAAO,kBAAQJ,OAAR,EAAP;AACD;;AAED,WAAO,kBAAQE,MAAR,CAAeE,GAAf,CAAP;AACD,GAnBI,CAAP;AAoBD,C,CArFD","file":"process-image.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport gm from 'gm';\nimport {pick} from 'lodash';\n\n/**\n * Measures an image file and produces a thumbnail for it\n * @param {Object} options\n * @param {Blob|ArrayBuffer} options.file\n * @param {Number} options.thumbnailMaxWidth\n * @param {Number} options.thumbnailMaxHeight\n * @param {Boolean} options.enableThumbnails\n * @param {Object} options.logger\n * @returns {Promise<Array>} Buffer, Dimensions, thumbnailDimensions\n */\nexport default function processImage({\n  file, type, thumbnailMaxWidth, thumbnailMaxHeight, enableThumbnails, logger\n}) {\n  const fileType = type || file.type;\n  if (!fileType || !fileType.startsWith('image')) {\n    return Promise.resolve();\n  }\n\n  const fileDimensions = new Promise((resolve, reject) => {\n    gm(file).size((err, size) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      resolve(pick(size, 'width', 'height'));\n    });\n  });\n\n  let thumbnail, thumbnailDimensions;\n  if (enableThumbnails) {\n    thumbnail = new Promise((resolve, reject) => {\n      gm(file).resize(thumbnailMaxWidth, thumbnailMaxHeight)\n        .autoOrient()\n        .toBuffer('PNG', (err, buffer) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n\n          resolve(buffer);\n        });\n    });\n\n    thumbnailDimensions = thumbnail.then((buffer) => new Promise((resolve, reject) => {\n      gm(buffer)\n        .size((err, size) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n\n          resolve(pick(size, 'width', 'height'));\n        });\n    }));\n  }\n\n\n  return Promise.all([thumbnail, fileDimensions, thumbnailDimensions])\n    .catch((err) => {\n      const errorString = err.toString();\n      if (errorString.includes('EPIPE')) {\n        logger.warn(err, 'Is GraphicsMagick installed?');\n        return Promise.resolve();\n      }\n\n      if (errorString.includes('No decode delegate for this image format')) {\n        logger.debug(err, 'File does not appear to be an image');\n        return Promise.resolve();\n      }\n\n      if (errorString.includes('Stream yields empty buffer')) {\n        logger.debug(err, 'File does not appear to be an image');\n        return Promise.resolve();\n      }\n\n      return Promise.reject(err);\n    });\n}\n"]}